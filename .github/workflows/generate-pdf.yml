name: Generate PDF

on:
  repository_dispatch:
    types: [generate-pdf]
  workflow_dispatch:
    inputs:
      html_content:
        description: 'HTML content to convert'
        required: true
        default: '<html><body><h1>Test</h1></body></html>'
      callback_url:
        description: 'n8n resume webhook URL'
        required: true

jobs:
  generate-pdf:
    runs-on: ubuntu-latest
    steps:
      - name: Debug payload
        env:
          EVENT_TYPE: ${{ github.event.action }}
          CLIENT_PAYLOAD: ${{ toJson(github.event.client_payload) }}
        run: |
          echo "Event type: $EVENT_TYPE"
          echo "Client payload: $CLIENT_PAYLOAD"
          
      - name: Extract callback URL
        id: callback
        run: |
          if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
            CALLBACK_URL="${{ github.event.client_payload.callback_url }}"
          else
            CALLBACK_URL="${{ github.event.inputs.callback_url }}"
          fi
          echo "callback_url=$CALLBACK_URL" >> $GITHUB_OUTPUT
          echo "Using callback URL: $CALLBACK_URL"
          
      - name: Checkout repo
        uses: actions/checkout@v4
        
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          
      - name: Install Playwright
        run: |
          npm install playwright
          npx playwright install chromium
          
      - name: Create PDF generation script
        run: |
          cat > generate-pdf.js << 'EOF'
          const fs = require('fs');
          const { chromium } = require('playwright');
          
          (async () => {
            try {
              const html = process.env.HTML_CONTENT;
              
              if (!html) {
                console.error('No HTML content provided');
                process.exit(1);
              }
              
              console.log('HTML content length:', html.length);
              
              const browser = await chromium.launch();
              const page = await browser.newPage();
              
              // Enhanced HTML wrapper with better styles
              const wrappedHTML = `
              <!DOCTYPE html>
              <html>
              <head>
                  <meta charset="UTF-8">
                  <meta name="viewport" content="width=device-width, initial-scale=1.0">
                  <style>
                      * { box-sizing: border-box; }
                      body { 
                          margin: 0; 
                          padding: 20px; 
                          font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                          line-height: 1.6;
                          color: #333;
                          background: white;
                      }
                      img { max-width: 100%; height: auto; }
                      table { width: 100%; border-collapse: collapse; }
                      th, td { padding: 8px; text-align: left; }
                  </style>
              </head>
              <body>
                  ${html}
              </body>
              </html>
              `;
              
              await page.setContent(wrappedHTML, { waitUntil: 'networkidle' });
              
              const pdfBuffer = await page.pdf({
                format: 'A4',
                printBackground: true,
                margin: { 
                  top: '20mm', 
                  right: '20mm', 
                  bottom: '20mm', 
                  left: '20mm' 
                }
              });
              
              await browser.close();
              
              fs.writeFileSync('output.pdf', pdfBuffer);
              console.log('PDF generated successfully, size:', pdfBuffer.length, 'bytes');
              
            } catch (error) {
              console.error('Error generating PDF:', error);
              process.exit(1);
            }
          })();
          EOF
          
      - name: Generate PDF
        env:
          HTML_CONTENT: ${{ github.event.client_payload.html_content || github.event.inputs.html_content }}
        run: node generate-pdf.js
          
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: generated-pdf
          path: output.pdf
          
      - name: Debug callback URL
        run: |
          echo "Callback URL: ${{ steps.callback.outputs.callback_url }}"
          ls -la output.pdf
          
      - name: Upload PDF to temporary storage (optional)
        if: success()
        id: upload
        run: |
          # Option 1: Upload to GitHub as a release asset or artifact download URL
          # Option 2: Upload to a temporary file service like file.io
          echo "Uploading PDF to temporary storage..."
          UPLOAD_RESPONSE=$(curl -F "file=@output.pdf" https://file.io)
          PDF_URL=$(echo $UPLOAD_RESPONSE | jq -r '.link // empty')
          
          if [ -n "$PDF_URL" ]; then
            echo "pdf_url=$PDF_URL" >> $GITHUB_OUTPUT
            echo "PDF uploaded to: $PDF_URL"
          else
            echo "pdf_url=" >> $GITHUB_OUTPUT
            echo "Failed to upload PDF"
          fi
          
      - name: Notify n8n webhook (success)
        if: success()
        run: |
          echo "Sending success notification to: ${{ steps.callback.outputs.callback_url }}"
          
          if [ -n "${{ steps.upload.outputs.pdf_url }}" ]; then
            # Send with PDF URL if upload succeeded
            curl -v -X POST \
              -H "Content-Type: application/json" \
              -d "{\"status\":\"success\",\"message\":\"PDF generated successfully\",\"pdf_url\":\"${{ steps.upload.outputs.pdf_url }}\"}" \
              "${{ steps.callback.outputs.callback_url }}"
          else
            # Fallback: try to send PDF directly
            curl -v -X POST \
              -H "Content-Type: multipart/form-data" \
              -F "pdf=@output.pdf" \
              -F "status=success" \
              -F "message=PDF generated successfully" \
              "${{ steps.callback.outputs.callback_url }}"
          fi
          
      - name: Notify n8n webhook (failure)
        if: failure()
        run: |
          echo "Sending failure notification to: ${{ steps.callback.outputs.callback_url }}"
          curl -v -X POST \
            -H "Content-Type: application/json" \
            -d '{"status":"error","message":"PDF generation failed"}' \
            "${{ steps.callback.outputs.callback_url }}"
