name: Generate PDF
on:
  repository_dispatch:
    types: [generate-pdf]
  workflow_dispatch:
    inputs:
      html_content:
        description: 'HTML content to convert'
        required: true
        default: '<html><body><h1>Test</h1></body></html>'

jobs:
  generate-pdf:
    runs-on: ubuntu-latest
    steps:
      - name: Debug payload
        env:
          EVENT_TYPE: ${{ github.event.action }}
          CLIENT_PAYLOAD: ${{ toJson(github.event.client_payload) }}
        run: |
          echo "Event type: $EVENT_TYPE"
          echo "Client payload: $CLIENT_PAYLOAD"
          
      - name: Checkout repo
        uses: actions/checkout@v4
        
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          
      - name: Install Playwright
        run: |
          npm install playwright
          npx playwright install chromium
          
      - name: Create PDF generation script
        run: |
          cat > generate-pdf.js << 'EOF'
          const fs = require('fs');
          const { chromium } = require('playwright');
          
          (async () => {
            try {
              const html = process.env.HTML_CONTENT;
              
              if (!html) {
                console.error('No HTML content provided');
                process.exit(1);
              }
              
              console.log('HTML content length:', html.length);
              
              const browser = await chromium.launch();
              const page = await browser.newPage();
              
              // Enhanced HTML wrapper with better styles
              const wrappedHTML = `
              <!DOCTYPE html>
              <html>
              <head>
                  <meta charset="UTF-8">
                  <meta name="viewport" content="width=device-width, initial-scale=1.0">
                  <style>
                      * { box-sizing: border-box; }
                      body { 
                          margin: 0; 
                          padding: 20px; 
                          font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                          line-height: 1.6;
                          color: #333;
                          background: white;
                      }
                      img { max-width: 100%; height: auto; }
                      table { width: 100%; border-collapse: collapse; }
                      th, td { padding: 8px; text-align: left; }
                  </style>
              </head>
              <body>
                  ${html}
              </body>
              </html>
              `;
              
              await page.setContent(wrappedHTML, { waitUntil: 'networkidle' });
              
              const pdfBuffer = await page.pdf({
                format: 'A4',
                printBackground: true,
                margin: { 
                  top: '20mm', 
                  right: '20mm', 
                  bottom: '20mm', 
                  left: '20mm' 
                }
              });
              
              await browser.close();
              
              fs.writeFileSync('output.pdf', pdfBuffer);
              console.log('PDF generated successfully, size:', pdfBuffer.length, 'bytes');
              
            } catch (error) {
              console.error('Error generating PDF:', error);
              process.exit(1);
            }
          })();
          EOF
          
      - name: Generate PDF
        env:
          HTML_CONTENT: ${{ github.event.client_payload.html_content || github.event.inputs.html_content }}
        run: node generate-pdf.js
          
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: generated-pdf
          path: output.pdf
          
      - name: Notify webhook
        if: success()
        run: |
           curl -X POST \
              -F "pdf=@output.pdf" \
              -F "status=success" \
              "${{ github.event.inputs.callback_url }}"
